package university.UserInterfaces.WorkAreas.AdminRole.AdminiterUserAccountWork;

import university.Business.Business;
import university.Person.Faculty.FacultyProfile;
import university.Person.Student.StudentProfile;
import university.Business.UserAccounts.UserAccount;
import university.Business.UserAccounts.UserAccountDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sange
 */
public class ManageUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    UserAccount selecteduseraccount;
    String manageActivityType;

    String MANAGE_STUDENT = "ManagaeStudent";
    String MANAGE_FACULTY = "ManagaeFaculty";
    String MANAGE_ALL_ACCOUNTS = "ManageAllUsers";

    public ManageUserAccountsJPanel(Business bz, JPanel jp, String manageActivityType) {
        this.CardSequencePanel = jp;
        this.business = bz;
        this.manageActivityType = manageActivityType;
        initComponents();
        refreshTable(manageActivityType);

    }

    public void refreshTable(String manageActivityType) {

        int rc = UserAccountTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) UserAccountTable.getModel()).removeRow(i);
        }

        UserAccountDirectory uad = business.getUserAccountDirectory();

        if (manageActivityType.equalsIgnoreCase(MANAGE_ALL_ACCOUNTS)) {
            for (UserAccount ua : uad.getUserAccountList()) {

                Object[] row = new Object[5];
                row[0] = ua;
                row[1] = ua.getAccountStatus();
                row[2] = ua.getLastActivity();
                row[3] = ua.getLastUpdated();
                if (ua.getProfile() instanceof StudentProfile) {
                    row[4] = ((StudentProfile) ua.getProfile()).getNuId();
                } else {
                    row[4] = "--";
                }

                ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
            }
        }

        if (manageActivityType.equalsIgnoreCase(MANAGE_FACULTY)) {
            for (UserAccount ua : uad.getUserAccountList()) {
                if (ua.getAssociatedPersonProfile() instanceof FacultyProfile) {
                    Object[] row = new Object[4];
                    row[0] = ua;
                    row[1] = ua.getAccountStatus();
                    row[2] = ua.getLastActivity();
                    row[3] = ua.getLastUpdated();

                    ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
                }
            }
        }

        if (manageActivityType.equalsIgnoreCase(MANAGE_STUDENT)) {
            for (UserAccount ua : uad.getUserAccountList()) {
                if (ua.getAssociatedPersonProfile() instanceof StudentProfile) {
                    Object[] row = new Object[4];
                    row[0] = ua;
                    row[1] = ua.getAccountStatus();
                    row[2] = ua.getLastActivity();
                    row[3] = ua.getLastUpdated();

                    ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserAccountTable = new javax.swing.JTable();
        btnAddAccount = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(176, 224, 230));
        setLayout(null);

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        add(Back);
        Back.setBounds(40, 300, 110, 30);

        Next.setText("Next >>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next);
        Next.setBounds(600, 300, 100, 30);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("User Accounts");
        add(jLabel1);
        jLabel1.setBounds(30, 90, 190, 19);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage User Accounts");
        add(jLabel2);
        jLabel2.setBounds(21, 20, 550, 28);

        UserAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "User Name", "Status", "Last Activity", "Last Updated", "NUID"
            }
        ));
        UserAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserAccountTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(UserAccountTable);
        if (UserAccountTable.getColumnModel().getColumnCount() > 0) {
            UserAccountTable.getColumnModel().getColumn(0).setMinWidth(70);
            UserAccountTable.getColumnModel().getColumn(0).setMaxWidth(100);
            UserAccountTable.getColumnModel().getColumn(1).setMinWidth(50);
            UserAccountTable.getColumnModel().getColumn(1).setMaxWidth(80);
            UserAccountTable.getColumnModel().getColumn(2).setMinWidth(130);
            UserAccountTable.getColumnModel().getColumn(2).setMaxWidth(150);
            UserAccountTable.getColumnModel().getColumn(3).setMinWidth(250);
            UserAccountTable.getColumnModel().getColumn(3).setMaxWidth(260);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 110, 670, 150);

        btnAddAccount.setText("Add Account");
        btnAddAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAccountActionPerformed(evt);
            }
        });
        add(btnAddAccount);
        btnAddAccount.setBounds(370, 300, 110, 30);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(492, 300, 90, 30);
        add(txtSearch);
        txtSearch.setBounds(370, 50, 200, 30);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(590, 50, 100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
        //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");

    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed

        int row = UserAccountTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(row, 0);
        AdminUserAccount userAccount = new AdminUserAccount(business, selecteduseraccount, CardSequencePanel);
        CardSequencePanel.add("AdminUserAccount", userAccount);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);

    }//GEN-LAST:event_NextActionPerformed

    private void UserAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserAccountTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
        int size = UserAccountTable.getRowCount();
        int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > size - 1) {
            return;
        }
        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(selectedrow, 0);
        if (selecteduseraccount == null) {
            return;
        }
    }//GEN-LAST:event_UserAccountTableMousePressed

    private void btnAddAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAccountActionPerformed
        AddAccountJPanel addAccount = new AddAccountJPanel(business, CardSequencePanel, manageActivityType);
        CardSequencePanel.add("AdminUserAccount", addAccount);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);
    }//GEN-LAST:event_btnAddAccountActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = UserAccountTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null,
                    "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(row, 0);
        UserAccountDirectory uadirectory = business.getUserAccountDirectory();
        uadirectory.removeAccount(selecteduseraccount);
        refreshTable(manageActivityType);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        if (!txtSearch.getText().isBlank()) {

            String studentNUID = txtSearch.getText();
            StudentProfile foundStudent = business.getStudentDirectory().findStudentUsingNuid(studentNUID);
            if (foundStudent != null) {
                UserAccountDirectory uadirectory = business.getUserAccountDirectory();
                selecteduseraccount = uadirectory.findUserAccount(foundStudent.getPerson().getId());
                if (selecteduseraccount != null) {
                    AdminUserAccount userAccount = new AdminUserAccount(business, selecteduseraccount, CardSequencePanel);
                    CardSequencePanel.add("AdminUserAccount", userAccount);
                    CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
                    layout.next(CardSequencePanel);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "1Student Account is not found please check the NUID or Create an Account",
                            "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "2Student Account is not found please check the NUID or Create an Account",
                        "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please type the NUID Id to search the Student Account",
                    "Warning", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Next;
    private javax.swing.JTable UserAccountTable;
    private javax.swing.JButton btnAddAccount;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
